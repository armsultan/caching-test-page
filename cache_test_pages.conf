
  # Disable automatic generation of the “ETag” response header field for static resources.
  etag off;

  # web app
  location / {
    try_files $uri $uri/ =404;

    # The Expires HTTP header is a basic means of controlling caches; it tells all caches how long 
    # the associated representation is fresh for. After that time, caches will always check back with 
    # the origin server to see if a document is changed.
    #
    # "If a request includes the no-cache directive, it SHOULD NOT include min-fresh, max-stale, or max-age." 
    # (source: http://www.ietf.org/rfc/rfc2616.txt, p114)
    #
    # A negative value means that the response expires immediately.
    # Nginx automatically sets the `Cache-Control: no-cache` header, if `expires` is negative
    #
    expires           -1;
  }

# Test Pages

    location ~ /Age.html {
        add_header X-Cache-Date $upstream_http_date;
    }

    location ~ /CacheControlMaxAge.html {
        add_header Cache-Control "public";
        expires 1h; # Set expires to 1hr from now
    }

    location ~ /CacheControlMustRevalidate.html {
        # cache must revalidate if stale
        add_header Cache-Control "public, must-revalidate";
        expires 10s; # Set expires to 10s from now
    }

    location ~ /CacheControlNoCache.html {
        add_header Cache-Control "no-cache";
    }

    location ~ /CacheControlNoStore.html {
        add_header Cache-Control "no-store";
    }

    location ~ /CacheControlNoTransform.html {
        # No transformations or conversions should be made to the resource
        add_header Cache-Control "public, no-transform";
        expires 1h; # Set expires to 1hr from now
    }

    location ~ /CacheControlPrivate.html {
        add_header Cache-Control "private";
        expires 1h; # Set expires to 1hr from now
    }

    location ~ /CacheControlProxyRevalidate.html {
         # Proxy cache must revalidate if stale
        add_header Cache-Control "public, proxy-revalidate";
        expires 10s; # Set expires to 1s from now
    }

    location ~ /CacheControlPublic.html {
        add_header Cache-Control "public";
        expires 1h; # Set expires to 1hr from now
    }

    location ~ /CacheControlSmaxage.html {
        # Cache on proxies for 5min and no cache (0s) on th browser
        add_header Cache-Control "public, s-maxage=300, max-age=0";
    }

    location ~ /Expires.html {
        add_header Cache-Control "public";
        # Nginx will add Cache-Control:max-age along with expires header:
        expires 1h; # Set expires to 1hr from now
    }

    location ~ /MetaCacheControlNoStore.html {
        # Nothing to do
    }
    location ~ /MetaPragmaNoCache.html {
        # Nothing to do
    }

    location ~ /NoHeaders.html {
        # Nothing to do
    }

    location ~ /PragmaNoCache.html {
        add_header Pragma "no-cache";
    }

    location ~ /SurrogateControlContent.html {
        add_header Cache-Control "public";
        expires 1h; # Set expires to 1hr from now
        add_header Surrogate-Control "content=ESI/1.0";
    }

    location ~ /SurrogateControlMaxAge.html {
        # Set expires on surrogates to 1hr and everything else for 10s
        add_header Cache-Control "public";
        expires 10s;
        add_header Surrogate-Control "max-age=3600";
    }

    location ~ /SurrogateControlNoStore.html {
        # Set no-store on surrogates and an hour for everything else
        add_header Cache-Control "public";
        expires 1h; # Set expires to 1hr from now
        add_header Surrogate-Control "no-store";
    }

    location ~ /SurrogateControlNoStoreRemote.html {
        # Set no-store on remote surrogates and an hour for everything else
        add_header Cache-Control "public";
        expires 1h; # Set expires to 1hr from now
        add_header Surrogate-Control "no-store-remote";
    }

    ## Images
    # This block will catch static file requests, such as images
    # The ?: prefix is a 'non-capturing' mark, meaning we do not require
    # the pattern to be captured into $1 which should help improve performance

    location ~* \.(?:jpg|jpeg|gif|png|ico)$ {
        # The Expires HTTP header is a basic means of controlling caches; it tells all caches how long 
        # the associated representation is fresh for. After that time, caches will always check back with 
        # the origin server to see if a document is changed.
        #
        # "If a request includes the no-cache directive, it SHOULD NOT include min-fresh, max-stale, or max-age." 
        # (source: http://www.ietf.org/rfc/rfc2616.txt, p114)
        #
        # Nginx automatically sets the `Cache-Control: max-age=t` header, if `expires` is present, where t is a time 
        # specified in the directive, in seconds
        #
        expires           5m;

        # public:           marks authenticated responses as cacheable; normally, if HTTP authentication is required, 
        #                   responses are automatically private.
        #
        add_header        Cache-Control "public";
    }

    ## CSS and JS

    # this block will catch files that might need to change immediately (e. g. to deploy hotfixes), such as js or css
    # The ?: prefix is a 'non-capturing' mark, meaning we do not require
    # the pattern to be captured into $1 which should help improve performance
    location ~* \.(?:css|js)$ {
        access_log        off;
        log_not_found     off;

        # no-cache:         forces caches to submit the request to the origin server for validation before releasing a 
        #                   cached copy, every time. This is useful to assure that authentication is respected 
        #                   (in combination with public), or to maintain rigid freshness, without sacrificing all of the 
        #                   benefits of caching.
        # 
        # public:           marks authenticated responses as cacheable; normally, if HTTP authentication is required, 
        #                   responses are automatically private.
        #
        # must-revalidate:  tells caches that they must obey any freshness information you give them about a 
        #                   representation. HTTP allows caches to serve stale representations under special conditions;
        #                   by specifying this header, you’re telling the cache that you want it to strictly follow 
        #                   your rules.
        # 
        # proxy-revalidate: similar to must-revalidate, except that it only applies to proxy caches.
        # 
        add_header        Cache-Control "no-cache, public, must-revalidate, proxy-revalidate";
    }

    ## Fonts
    # This block will catch static file requests of fonts and allows fonts to be requested via CORS
    # The ?: prefix is a 'non-capturing' mark, meaning we do not require
    # the pattern to be captured into $1 which should help improve performance

    location ~* \.(?:eot|woff|woff2|ttf|svg|otf) {
        access_log        off;
        log_not_found     off;

        # The Expires HTTP header is a basic means of controlling caches; it tells all caches how long
        # the associated representation is fresh for. After that time, caches will always check back with
        # the origin server to see if a document is changed.
        #
        # "If a request includes the no-cache directive, it SHOULD NOT include min-fresh, max-stale, or max-age."
        # (source: http://www.ietf.org/rfc/rfc2616.txt, p114)
        #
        # Nginx automatically sets the `Cache-Control: max-age=t` header, if `expires` is present, where t is a time
        # specified in the directive, in seconds
        #
        expires           5m;

        # public:           marks authenticated responses as cacheable; normally, if HTTP authentication is required,
        #                   responses are automatically private.
        #
        add_header        Cache-Control "public";

        # allow CORS requests
        add_header        Access-Control-Allow-Origin *;

        types     {font/opentype otf;}
        types     {application/vnd.ms-fontobject eot;}
        types     {font/truetype ttf;}
        types     {application/font-woff woff;}
        types     {font/x-woff woff2;}
    }